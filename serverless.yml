service: notes-app-2-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  region : ${opt:region, self:provider.region}
  # Set the table name here so we can use it while testing locally
  notesTableName: sle-notes-${self:custom.stage}
  connectionsTableName: sle-connections-${self:custom.stage}

provider:
  name: aws
  runtime: nodejs10.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  tags:
    Project: SLE
    Developer: ${env:USER}

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    notesTableName: ${self:custom.notesTableName}
    connectionsTableName: ${self:custom.connectionsTableName}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - "dynamodb:BatchGetItem"
        - "dynamodb:BatchWriteItem"
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ NotesTable, Arn ]
        - "Fn::GetAtt": [ ConnectionsTable, Arn ]
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"

  # optional
  websocketApiName: notes-app-${self:provider.stage}

  # required for websocket apis
  # this selects from your payload what your "routeKey" parameter is
  # from the websocket event types on your function
  websocketApiRouteSelectionExpression: $request.body.action


functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: src/lambda/create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam
    environment:
      BROADCAST_FN: ${self:service}-${self:provider.stage}-broadcast

  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: src/lambda/get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: src/lambda/list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam

  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: src/lambda/update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam
    environment:
      BROADCAST_FN: ${self:service}-${self:provider.stage}-broadcast

  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: src/lambda/delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam
    environment:
      BROADCAST_FN: ${self:service}-${self:provider.stage}-broadcast

  # manage connection and disconnection of clients
  onConnect:
    handler: src/lambda/onconnect.main
    events:
      - websocket:
          route: $connect

  # manage connection and disconnection of clients
  onDisconnect:
    handler: src/lambda/ondisconnect.main
    events:
      - websocket:
          route: $disconnect

  # just in case we are getting weird / bad data
  # we can react to it with a sane response
  defaultMessages:
     handler: src/lambda/default.main
     events:
       - websocket:
           route: $default

  # async broadcast to all clients after change
  broadcast:
    handler: src/lambda/broadcast.main
    environment:
      WSS_URL: { "Fn::Join" : ["", [ "https://", { "Ref" : "WebsocketsApi" }, ".execute-api.${self:custom.region}.amazonaws.com/${self:custom.stage}" ] ]  }

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
